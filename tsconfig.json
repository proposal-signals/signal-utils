{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "@tsconfig/strictest",
  "include": ["src", "tests"],
  "exclude": ["dist", "declarations"],
  "compilerOptions": {
    "target": "esnext",
    "module": "preserve",
    "moduleResolution": "bundler",
    "declaration": true,
    "emitDeclarationOnly": true,
    "jsx": "react-jsx",

    /**
     Stylistic / linting. Does not provide extra type safety.
     */
    "noPropertyAccessFromIndexSignature": false,

    /**
      https://www.typescriptlang.org/tsconfig#allowImportingTsExtensions

      We want our tooling to know how to resolve our custom files so the appropriate plugins
      can do the proper transformations on those files.
    */
    "allowImportingTsExtensions": true,

    /**
      We don't want to include types dependencies in our compiled output, so tell TypeScript
      to enforce using `import type` instead of `import` for Types.
    */
    "verbatimModuleSyntax": true,

    /**
      Don't implicitly pull in declarations from `@types` packages unless we
      actually import from them AND the package in question doesn't bring its
      own types. You  may wish to override this e.g. with `"types": ["node"]`
      if your project has build-time elements that use NodeJS APIs.
    */
    "types": [],

    /**
     for easier test authoring.
     note that all imports under `src` should use relative or subpath-imports 
     (defined in packaeg.json)
     */
    "baseUrl": "./src",
    "paths": {
      "signal-utils": ["./index.ts"],
      "signal-utils/*": ["./*.ts"]
    }
  }
}
